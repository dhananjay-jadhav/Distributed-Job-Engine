name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: npx nx start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Start services using docker-compose
      - name: Start Docker Compose services
        run: docker compose up -d

      # Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          timeout 30 bash -c 'until docker compose exec -T postgres pg_isready -U postgres; do sleep 1; done'

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'yarn'

      - run: cp .env.sample .env

      - run: yarn install --immutable

      # Run Prisma migrations
      - name: Run database migrations
        run: yarn nx migrate-prisma auth-db
        env:
          DATABASE_URL: postgres://postgres:admin@localhost:5432/auth

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: yarn nx-cloud record -- echo Hello World
      - run: yarn nx run-many -t lint test build
        env:
          DATABASE_URL: postgres://postgres:admin@localhost:5432/auth

      # Cleanup
      - name: Stop Docker Compose services
        if: always()
        run: docker compose down
